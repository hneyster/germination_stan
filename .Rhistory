x<-input()
(y<-2*x)
input
?input
x<-readline()
(y<-2*x)
(y=2*x)
x
x<-as.numeric(readline())
(y=2*x)
species<-(readline())
species1<-readline+"color"
typeof(species)
concatenate
setwd("\documents")
setwd("/documents")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
setwd("~/")
setwd("~/documents")
setwd("~/")
setwd("~/Documents")
data<-read.csv("eng-daily-01012016-12312016.csv")
head(data)
view(data)
View(data)
data<-read.csv("eng-daily-01012016-12312016.csv")
data<-read.csv("eng-daily-01012016-12312016.csv", skip=24)
head(data)
View(data)
plot(data[,1], data[,16])
length(data)
dim(data)
dim(data[1])
l<-dim(data[1])
for i in (seq(1,l, 7)) {
data_week<- rbind(data_week,data[i,1])
}
l<-dim(data[1])
data_week<-data.frame()
for i in (seq(1,l, 7)) {
data_week<- rbind(data_week,data[i,1])
}
for (i in (seq(1,l, 7))) {
data_week<- rbind(data_week,data[i,1])
}
for (i in seq(1,l, 7)) {
data_week<- rbind(data_week,data[i,1])
}
l
l<-dim(data[1])
l
l<-length(data)
l
l<-length(data[,1])
l
for (i in seq(1,l, 7)) {
data_week<- rbind(data_week,data[i,1])
}
View(data_week)
data[1,1]
data[2,1]
head(data)
data$Date.Time[1]
as.numerc(data$Date.Time[1])
as.numeric(data$Date.Time[1])
as.numeric(data$Date.Time[2])
as.numeric(data$Date.Time[3])
data$week<-seq(1,l,7)
seq(1,l,7)
seq(1,7)
data$week<-seq(1,7, 10)
seq(1,7,10)
seq(1,7, 4)
rep(1:10, 26)
data$week<-rep(1:7,52)
data$week<-rep(1:7,53)
data$week<-rep(1:7,52.6)
data$week<-rep(1:7,52.7)
data$week<-c(rep(1:7,52), 1,2)
View(data)
mod<-lm(Total.Rain..mm ~ as.factor(week), data=data)
head(data)
mod<-lm(Total.Precip..mm ~ as.factor(week), data=data)
mod<-lm(Total.Precip..mm. ~ as.factor(week), data=data)
mod
summary(mod)
plot(week, Total.Precip..mm.)
plot(week, Total.Precip..mm., data=data)
plot(data$week, data$Total.Precip..mm.)
mod<-lm(Total.Precip..mm. ~ (week), data=data)
summary(mod)
data$week<-c(rep(6,7,rep(1:7,52))
mod<-lm(Total.Precip..mm. ~ (week), data=data)
plot(data$week, data$Total.Precip..mm.)
data$week
data$week<-c(6,7,(rep(1:7,52)))
mod<-lm(Total.Precip..mm. ~ (week), data=data)
plot(data$week, data$Total.Precip..mm.)
summary(mod)
mod<-lm(Total.Precip..mm. ~ as.factor(week), data=data)
summary(mod)
abline(5.14, .227)
ifelse(data$week==6, 7, data$week)
data$week<-c(6,7,(rep(1:7,52)))
ifelse(data$week==7, 1, data$week)
mod<-lm(Total.Precip..mm. ~ as.factor(week), data=data)
summary(mod)
plot(data$week, data$Total.Precip..mm.)
ifelse(data$week==7, 1, data$week)
plot(data$week, data$Total.Precip..mm.)
abline(5.14, .227)
data$week<-ifelse(data$week==7, 1, data$week)
mod<-lm(Total.Precip..mm. ~ as.factor(week), data=data)
plot(data$week, data$Total.Precip..mm.)
mod<-lm(Total.Precip..mm. ~ (week), data=data)
data$week<-ifelse(data$week==7, 1, 2)
data$week<-c(6,7,(rep(1:7,52)))
data$week<-ifelse(data$week==7, 1, 2)
mod<-lm(Total.Precip..mm. ~ (week), data=data)
summary(mod)
plot(data$week, data$Total.Precip..mm.)
abline(5.14, -..44)
abline(5.14, -.44)
qqplot(mod)
qqpnorm(mod)
qqnorm(mod)
mean(Total.Precip..mm.,data=subset(data, data$week==1))
mean(subset(data, data$week==1)$Total.Precip..mm.)
mean(subset(data, data$week==1)$Total.Precip..mm., na.rm=TRUE)
mean(subset(data, data$week==2)$Total.Precip..mm., na.rm=TRUE)
data$week<-c(6,7,(rep(1:7,52)))
data$week<-ifelse(data$week==7|6, 1, 2)
mean(subset(data, data$week==2)$Total.Precip..mm., na.rm=TRUE)
data$week
data$week<-ifelse(data$week==7||6, 1, 2)
data$week
data$week<-ifelse(data$week==7 && 6, 1, 2)
data$week
data$week<-c(6,7,(rep(1:7,52)))
data$week<-ifelse(data$week==7, 1, ifelse(data$week==1, 2)
data$week<-ifelse(data$week==7, 1, ifelse(data$week==1, 2)
)
data$week<-ifelse(data$week==7, 1, ifelse(data$week==1, 2))
data$week<-ifelse(data$week==7, 1, (ifelse(data$week==1, 2)))
data$week<-ifelse(data$week==7, 1, (ifelse(data$week==1, 1, 2)))
data$week
mod<-lm(Total.Precip..mm. ~ (week), data=data)
plot(data$week, data$Total.Precip..mm.)
summary(mod)
abline(5.64, -.404)
mean(subset(data, data$week==2)$Total.Precip..mm., na.rm=TRUE)
mean(subset(data, data$week==1)$Total.Precip..mm., na.rm=TRUE)
View(data)
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month=! c(5,6,7,8))
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month=! c(5,6,7,8)))
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month!= c(5,6,7,8)))
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month== c(1,2,3,4,9,10,11,12)))
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month== 1 || 2 || 3 || 4 || 9 || 10 || 11 || 12)))
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month== 1 || 2 || 3 || 4 || 9 || 10 || 11 || 12))
summary(mod)
mean(subset(data, data$week==1 & data$month==1 || 2 || 3 || 4 || 9 || 10 || 11 || 12)$Total.Precip..mm., na.rm=TRUE)
mean(subset(data, data$week==2 & data$month==1 || 2 || 3 || 4 || 9 || 10 || 11 || 12)$Total.Precip..mm., na.rm=TRUE)
subset(data, data$week==2 & data$month==1 || 2 || 3 || 4 || 9 || 10 || 11 || 12)$Total.Precip..mm., na.rm=TRUE
mean(subset(data, data$week==2 & data$month==1)$Total.Precip..mm., na.rm=TRUE)
View(data)
mean(subset(data, data$week==2 && data$month==1)$Total.Precip..mm., na.rm=TRUE)
mean(subset(data, data$week==2 && data$month==2)$Total.Precip..mm., na.rm=TRUE)
mean(subset(data, data$week==2 && as.numeric(data$month)==2)$Total.Precip..mm., na.rm=TRUE)
mean(subset(data, data$week==2)$Total.Precip..mm., na.rm=TRUE)
mod<-lm(Total.Precip..mm. ~ (week), data=subset(data, data$month==1))
mod<-lm(Total.Precip..mm. ~ (week), data=data)
data$rain<- ifelse(data$Total.Precip..mm.<=1, 0, 1)
mod1<-glm(Total.Precip..mm. ~ (week), family=logit, data=data)
mod1<-glm(Total.Precip..mm. ~ (week), family=binomial, link=logit, data=data)
?glm
mod1<-glm(Total.Precip..mm. ~ (week), family=binomial (link="logit"), data=data)
mod1<-glm(rain ~ (week), family=binomial (link="logit"), data=data)
summary(mod1)
plot(data$week, data$rain)
plot(data$week, data$rain, pch=15)
plot(data$week, data$rain, pch=30)
plot(data$rain ~ jitter(data$rain, 1))
plot(data$rain ~ jitter(data$rain, 2))
mean(subset(data, data$week==2)$rain, na.rm=TRUE)
mean(subset(data, data$week==1)$rain, na.rm=TRUE)
plot(data$rain ~ jitter(data$rain, .5))
plot(data$rain ~ jitter(data$rain,0))
plot(data$rain ~ jitter(data$week,1))
plot(jitter(data$rain,1) ~ jitter(data$week,1))
abline(.245, -.287)
mod2<-lm(Total.Precip..mm. ~ (week), data=data, family=poisson(link="log"))
mod2<-glm(Total.Precip..mm. ~ (week), data=data, family=poisson(link="log"))
warnings()
mod2<-glm(log(Total.Precip..mm.) ~ (week), data=data)
log(0)
library(rstanarm)
mod2<-rstanarm.glm((Total.Precip..mm.) ~ (week), data=data)
mod2<-stan_glm((Total.Precip..mm.) ~ (week), data=data)
my_sso <- launch_shinystan(mod2, rstudio = getOption("shinystan.rstudio"))
mod3<-stan_glm(rain~week, family=binomial(link="logit"), data=data)
my_sso <- launch_shinystan(mod3, rstudio = getOption("shinystan.rstudio"))
rm(list=ls())
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/undergrads/harold/analyses/germination_stan")
} else
setwd("C:/Users/Owner/Documents/GitHub/germination_stan")
library(rstan)
library(shinystan)
library(lme4)
library(ggplot2)
library(rstanarm)
source("http://peterhaschke.com/Code/multiplot.R")
runstan=TRUE      # set to true if running the stan model
realdata=TRUE    # set to true to run on real data
if (realdata==TRUE) {
# Setting up the  real data  for the Stan model-----------------
load("germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs,
germinated==1 &
sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
data<-germs.y
nseed<-length(unique(data$uniqueid)) #1205 unique seeds
N<-nseed
y<-data$daysfromstart    # dependent variable
log_y=log(y)
temp1<-ifelse(data$temp==16.0, 1, 0) #coding temperature as binary dummy variables
temp2<-ifelse(data$temp==20.7, 1, 0)
temp3<-ifelse(data$temp==25.3,1, 0)
strat<-ifelse(data$strat==30,0,1)
origin<-ifelse(data$origin=="Europe", 0, 1)
intercept<-rep(1, nrow(data))
#setting up to random effects data:
nsp<-length(unique(germs.y$sp))
sp_alph<-data$sp
sp<-ifelse (sp_alph=="CAPBUR", 1,     #making sp numeric, in alphabetical order
ifelse(sp_alph=="CHEMAJ",2,
ifelse(sp_alph=="DACGLO", 3,
ifelse(sp_alph=="PLALAN", 4,
ifelse(sp_alph=="PLAMAJ", 5,
ifelse(sp_alph=="RUMCRI", 6, 7))))))
loc<-as.numeric(as.factor(data$loc))
sfamily<-as.numeric(as.factor(data$uniqind))
nsp <- length(unique(data$sp))
#putting all the data together:
datax <- data.frame(N=N, log_y=log_y, y, temp1=temp1, temp2=temp2, temp3=temp3 ,origin=origin, strat=strat,
nsp=nsp, sp=sp, loc=loc, sfamily=sfamily)
#,nloc=nloc, nfamily=nfamily, loc=loc, family=family)
}
if (runstan==TRUE) {
if (realdata==TRUE) {
germdata=datax
} else
{load("Fake_germdata.RData")
germdata<-data.frame(log_y=fake$log_y, temp1=as.numeric(fake$temp1),temp2=as.numeric(fake$temp2),
temp3=as.numeric(fake$temp3), origin=as.numeric(fake$origin),
strat=as.numeric(fake$strat), N=nrow(fake),sp=as.numeric(fake$sp),
nsp=length(unique(fake$sp)))}
## Fitting models with rstanarm:
# Model 1: random intercept:
m<-stan_lmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 + (1|sp),
data=germdata, algorithm= "sampling", #family=poisson(link="log"),
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5))
#Model 2: now adding random slopes
mod_time_rslope<-stan_lmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 +
(1|sp) +
(origin -1|sp) + (strat -1|sp) + (temp1 -1|sp) + (temp2 -1|sp) +  (temp3 -1|sp) + (origin:strat -1|sp) + (origin:temp1 -1|sp) + (origin:temp2 -1|sp) + (origin:temp3 -1|sp)+
(strat:temp1 -1|sp) + (strat:temp2 -1|sp) + (strat:temp3 -1|sp) + (origin:strat:temp1 -1|sp) + (origin:strat:temp2 -1|sp) + (origin:strat:temp3 -1|sp),
data=germdata, algorithm= "sampling",
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=4, iter=2000)
# Model 3: now adding additional nested random effects:
mod_time_log<-stan_lmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin:strat + origin:temp1 + origin:temp2 + origin:temp3 +
strat:temp1 + strat:temp2 + strat:temp3 +
origin:strat:temp1 +  origin:strat:temp2 + origin:strat:temp3 +
(1|sp/loc/sfamily) +
(origin -1|sp/loc/sfamily) + (strat -1|sp/loc/sfamily) + (temp1 -1|sp/loc/sfamily) +
(temp2 -1|sp/loc/sfamily) +  (temp3 -1|sp/loc/sfamily)+
(origin:strat -1|sp/loc/sfamily) + (origin:temp1 -1|sp/loc/sfamily) + (origin:temp2 -1|sp/loc/sfamily) +
(origin:temp3 -1|sp/loc/sfamily) +  (strat:temp1 -1|sp/loc/sfamily) + (strat:temp2 -1|sp/loc/sfamily) +
(strat:temp3 -1|sp/loc/sfamily) + (origin:strat:temp1 -1|sp/loc/sfamily) +
(origin:strat:temp2 -1|sp/loc/sfamily) + (origin:strat:temp3 -1|sp/loc/sfamily),
data=germdata, algorithm= "sampling",
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=4, iter=2000)
#and checking against lmer model:
mod_rs_freq2<-lmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 +
(1|sp) +
(origin -1|sp) + (strat -1|sp) + (temp1 -1|sp) + (temp2 -1|sp) +  (temp3 -1|sp) + (origin:strat -1|sp) + (origin:temp1 -1|sp) + (origin:temp2 -1|sp) + (origin:temp3 -1|sp)+
(strat:temp1 -1|sp) + (strat:temp2 -1|sp) + (strat:temp3 -1|sp) + (origin:strat:temp1 -1|sp) + (origin:strat:temp2 -1|sp) + (origin:strat:temp3 -1|sp),
data=germdata, algorithm= "sampling",
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=4, iter=2000)
save(mod_time_log, "mod_time_log.Rdata")
}
m<-stan_lmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 + (1|sp),
data=germdata, algorithm= "sampling", #family=poisson(link="log"),
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5))
mod_time_p1<-stan_lmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 +
(1|sp) +
(origin -1|sp) + (strat -1|sp) + (temp1 -1|sp) + (temp2 -1|sp) +  (temp3 -1|sp) + (origin:strat -1|sp) + (origin:temp1 -1|sp) + (origin:temp2 -1|sp) + (origin:temp3 -1|sp)+
(strat:temp1 -1|sp) + (strat:temp2 -1|sp) + (strat:temp3 -1|sp) + (origin:strat:temp1 -1|sp) + (origin:strat:temp2 -1|sp) + (origin:strat:temp3 -1|sp),
data=germdata, algorithm= "sampling", family=poisson,
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=4, iter=2000)
mod_time_p1<-stan_glmer(log_y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 +
(1|sp) +
(origin -1|sp) + (strat -1|sp) + (temp1 -1|sp) + (temp2 -1|sp) +  (temp3 -1|sp) + (origin:strat -1|sp) + (origin:temp1 -1|sp) + (origin:temp2 -1|sp) + (origin:temp3 -1|sp)+
(strat:temp1 -1|sp) + (strat:temp2 -1|sp) + (strat:temp3 -1|sp) + (origin:strat:temp1 -1|sp) + (origin:strat:temp2 -1|sp) + (origin:strat:temp3 -1|sp),
data=germdata, algorithm= "sampling", family=poisson,
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=4, iter=2000)
mod_time_p1<-stan_glmer(y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 +
(1|sp) +
(origin -1|sp) + (strat -1|sp) + (temp1 -1|sp) + (temp2 -1|sp) +  (temp3 -1|sp) + (origin:strat -1|sp) + (origin:temp1 -1|sp) + (origin:temp2 -1|sp) + (origin:temp3 -1|sp)+
(strat:temp1 -1|sp) + (strat:temp2 -1|sp) + (strat:temp3 -1|sp) + (origin:strat:temp1 -1|sp) + (origin:strat:temp2 -1|sp) + (origin:strat:temp3 -1|sp),
data=germdata, algorithm= "sampling", family=poisson,
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=4, iter=2000)
mod_time_p1<-stan_glmer(y ~ origin + strat + temp1 + temp2 + temp3 +
origin*strat + origin*temp1 + origin*temp2 + origin*temp3 +
strat*temp1 + strat*temp2 + strat*temp3 +
origin*strat*temp1 +  origin*strat*temp2 + origin*strat*temp3 +
(1|sp) +
(origin -1|sp) + (strat -1|sp) + (temp1 -1|sp) + (temp2 -1|sp) +  (temp3 -1|sp) + (origin:strat -1|sp) + (origin:temp1 -1|sp) + (origin:temp2 -1|sp) + (origin:temp3 -1|sp)+
(strat:temp1 -1|sp) + (strat:temp2 -1|sp) + (strat:temp3 -1|sp) + (origin:strat:temp1 -1|sp) + (origin:strat:temp2 -1|sp) + (origin:strat:temp3 -1|sp),
data=germdata, algorithm= "sampling", family=poisson,
prior=normal(), prior_intercept=normal(0,10), prior_aux=cauchy(0,5),  chains=1, iter=500)
my_sso <- launch_shinystan(mod_time_p1, rstudio = getOption("shinystan.rstudio"))
mod_to_plot<- mod_time_p1
p1<-plot(mod_to_plot, pars=c("origin", "strat", "temp1", "temp2", "temp3", "origin:strat", "origin:temp1", "origin:temp2",
"origin:temp3", "strat:temp1", "strat:temp2", "strat:temp3", "origin:strat:temp1", "origin:strat:temp2", "origin:strat:temp3"))
p2<-plot(mod_to_plot, pars=c("b[origin sp:1]", "b[strat sp:1]", "b[temp1 sp:1]", "b[temp2 sp:1]", "b[temp3 sp:1]", "b[origin:strat sp:1]",
"b[origin:temp1 sp:1]", "b[origin:temp2 sp:1]", "b[origin:temp3 sp:1]", "b[strat:temp1 sp:1]", "b[strat:temp2 sp:1]", "b[strat:temp3 sp:1]", "b[origin:strat:temp1 sp:1]",
"b[origin:strat:temp2 sp:1]", "b[origin:strat:temp3 sp:1]"))
p3<-plot(mod_to_plot, pars=c("b[origin sp:2]", "b[strat sp:2]", "b[temp1 sp:2]", "b[temp2 sp:2]", "b[temp3 sp:2]", "b[origin:strat sp:2]",
"b[origin:temp1 sp:2]", "b[origin:temp2 sp:2]", "b[origin:temp3 sp:2]","b[strat:temp1 sp:2]", "b[strat:temp2 sp:2]", "b[strat:temp3 sp:2]", "b[origin:strat:temp1 sp:2]",
"b[origin:strat:temp2 sp:2]", "b[origin:strat:temp3 sp:2]"))
p4<-plot(mod_to_plot, pars=c("b[origin sp:3]", "b[strat sp:3]", "b[temp1 sp:3]", "b[temp2 sp:3]", "b[temp3 sp:3]", "b[origin:strat sp:3]",
"b[origin:temp1 sp:3]", "b[origin:temp2 sp:3]",  "b[origin:temp3 sp:3]", "b[strat:temp1 sp:3]", "b[strat:temp2 sp:3]", "b[strat:temp3 sp:3]", "b[origin:strat:temp1 sp:3]",
"b[origin:strat:temp2 sp:3]", "b[origin:strat:temp3 sp:3]"))
p5<-plot(mod_to_plot, pars=c("b[origin sp:4]", "b[strat sp:4]", "b[temp1 sp:4]", "b[temp2 sp:4]", "b[temp3 sp:4]", "b[origin:strat sp:4]",
"b[origin:temp1 sp:4]", "b[origin:temp2 sp:4]",  "b[origin:temp3 sp:4]", "b[strat:temp1 sp:4]", "b[strat:temp2 sp:4]", "b[strat:temp3 sp:4]", "b[origin:strat:temp1 sp:4]",
"b[origin:strat:temp2 sp:4]", "b[origin:strat:temp3 sp:4]"))
p6<-plot(mod_to_plot, pars=c("b[origin sp:5]", "b[strat sp:5]", "b[temp1 sp:5]", "b[temp2 sp:5]", "b[temp3 sp:5]", "b[origin:strat sp:5]",
"b[origin:temp1 sp:5]", "b[origin:temp2 sp:5]",  "b[origin:temp3 sp:5]", "b[strat:temp1 sp:5]", "b[strat:temp2 sp:5]", "b[strat:temp3 sp:5]", "b[origin:strat:temp1 sp:5]",
"b[origin:strat:temp2 sp:5]", "b[origin:strat:temp3 sp:5]"))
p7<-plot(mod_to_plot, pars=c("b[origin sp:6]", "b[strat sp:6]", "b[temp1 sp:6]", "b[temp2 sp:6]", "b[temp3 sp:6]", "b[origin:strat sp:6]",
"b[origin:temp1 sp:6]", "b[origin:temp2 sp:6]",  "b[origin:temp3 sp:6]","b[strat:temp1 sp:6]", "b[strat:temp2 sp:6]", "b[strat:temp3 sp:6]", "b[origin:strat:temp1 sp:6]",
"b[origin:strat:temp2 sp:6]", "b[origin:strat:temp3 sp:6]"))
p8<-plot(mod_to_plot, pars=c("b[origin sp:7]", "b[strat sp:7]", "b[temp1 sp:7]", "b[temp2 sp:7]", "b[temp3 sp:7]", "b[origin:strat sp:7]",
"b[origin:temp1 sp:7]", "b[origin:temp2 sp:7]",  "b[origin:temp3 sp:7]","b[strat:temp1 sp:7]", "b[strat:temp2 sp:7]", "b[strat:temp3 sp:7]", "b[origin:strat:temp1 sp:7]",
"b[origin:strat:temp2 sp:7]", "b[origin:strat:temp3 sp:7]"))
multiplot(p1,p2, p3, p4, p5, p6, p7, p8 cols=4)
multiplot(p1,p2, p3, p4, p5, p6, p7, p8, cols=4)
pdf("timing_poisson_no-nest.pdf", width=20, height=11)
multiplot(p1,p2, p3, p4, p5, p6, p7, p8, cols=4)
dev.off()
