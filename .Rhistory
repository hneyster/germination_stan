names(ebird_formatted)<-c("region", "value")
county_choropleth(ebird_formatted)
View(ebird_formatted)
unique(ebird_formatted$region)
count(unique(ebird_formatted$region))
sum(unique(ebird_formatted$region))
length(unique(ebird_formatted$region))
print(-unique(ebird_formatted$region))
duplicated(ebird_formatted$region))
duplicated(ebird_formatted$region)
print(duplicated(ebird_formatted$region)==TRUE)
ebird_formatted[3399]
ebird_formatted[339]
ebird_formatted[,339]
ebird_formatted[339,]
ebird_formatted[338,]
ebird_formatted[340,]
length(county.fips)
length(county.fips$polyname)
length(unique(county.fips$fips))
anyDuplicated(county.fips)
anyDuplicated(county.fips$region)
anyDuplicated(county.fips$fips)
head(county.fips)
View(county.fips)
ebird.2<-ebird_formatted
ebird.2<-data.frame(ebirdc$polyname, ebirdc$V2
)
names(ebird.2)<-c("region", "value")
county_choropleth(ebird.2)
head(ebird.2)
ebird.2<-data.frame(ebirdfips$polyname, ebirdfips$V2)
names(ebird.2)<-c("region", "value")
head(ebird.2)
ebird.2[is.na(ebird.2)] <- 0
head(ebird.2)
county_choropleth(ebird.2)
ebird<-read.csv("ebird_counties.csv", header=FALSE)
ebirdc<-separate(ebird, V1,into=c("county", "state"), ",")
ebirdc$polynameU<-do.call(paste, c(ebirdc[c("state", "county")], sep=","))
ebirdc$polynamel<-tolower(ebirdc$polynameU)
ebirdc$polyname<-sub(" ", "", ebirdc$polyname, fixed = TRUE)
county.fips$polyname<-as.character(county.fips$polyname)
ebirdc$polyname<-sub(" ", "", ebirdc$polynamel, fixed = TRUE)
county.fips$polyname<-as.character(county.fips$polyname)
ebirdfips<-merge(ebirdc, county.fips, by=("polyname"), all.y=TRUE)
ebird_formatted<-data.frame(ebirdfips$fips, ebirdfips$V2)
ebird_formatted[is.na(ebird_formatted)] <- 0
names(ebird_formatted)<-c("region", "value")
head(ebird_formatted)
View(ebirdfips)
library(dplyr)
ebird_formatted %>% distinct(region, .keep_all = TRUE)
ebird.2<-ebird_formatted %>% distinct(region, .keep_all = TRUE)
county_choropleth(ebird.2)
?admin1.regions
library(choroplethrAdmin1)
install.packages("choroplethrAdmin1")
library("choroplethrAdmin1")
?admin1.regions
?get_admin_regions
library(choroplethrAdmin1)
?get_admin_regions
??get_admin_regions
library(ggplot2)
set.seed(1)    # for reproducible example
map.county <- map_data('county')
counties   <- unique(map.county[,5:6])
akcounties <- counties[counties$region=="arkansas",]
akcounties
obesity_map <- data.frame(state_names=akcounties$region,
county_names=akcounties$subregion,
obesity= runif(nrow(akcounties), min=0, max=100))
head(obesity_map)
## Not run:
library(choroplethrAdmin1)
# map of continental us + southern canada
data("continental_us_states")
lower_canada = c("british columbia", "alberta", "saskatchewan", "manitoba", "ontario", "quebec")
regions = c(lower_canada, continental_us_states)
df = data.frame(region=regions, value=sample(1:length(regions)))
admin1_region_choropleth(df)
head(df)
county.regions
data(county.regions)
head(county.regions)
typeof(county.regions[1,4])
ebird<-read.csv("ebird_counties.csv", header=FALSE)
ebirdc<-separate(ebird, V1,into=c("county.name", "state.name"), ",")
ebirdc<-separate(ebird, tolower(V1),into=c("county.name", "state.name"), ",")
ebirdc<-separate(ebird, tolower(ebird$V1),into=c("county.name", "state.name"), ",")
county_choropleth(ebird.2, statezoom=michigan)
county_choropleth(ebird.2, statezoom=Michigan)
county_choropleth(ebird.2, state_zoom=michigan)
county_choropleth(ebird.2, state_zoom=mi)
?state.regions
data(state.regions)
head(state.regions)
county_choropleth(ebird.2, state_zoom=MI)
county_choropleth(ebird.2, state_zoom=michigan)
View(state.regions)
county_choropleth(ebird.2, state_zoom="michigan")
county_choropleth(ebird.2, state_zoom="massachusetts")
county_choropleth(ebird.2, state_zoom="florida")
county_choropleth(ebird.2, state_zoom="texas")
county_choropleth(ebird.2, state_zoom="colorado")
county_choropleth(ebird.2, state_zoom="arizona")
county_choropleth(ebird.2, state_zoom="alaska")
county_choropleth(ebird.2, state_zoom="hawaii")
county_choropleth(ebird.2, state_zoom="florida")
county_choropleth(ebird.2, state_zoom="florida", num_colors=[2,9])
county_choropleth(ebird.2, state_zoom="florida", num_colors=0)
county_choropleth(ebird.2, state_zoom="florida", num_colors=9)
county_choropleth(ebird.2, state_zoom="florida", num_colors=15)
county_choropleth(ebird.2, state_zoom="florida", num_colors=5)
county_choropleth(ebird.2, state_zoom="florida", num_colors=6)
county_choropleth(ebird.2, state_zoom="florida", num_colors=9)
county_choropleth(ebird.2,  num_colors=9)
county_choropleth(ebird.2, state_zoom="florida", num_colors=1)
county_choropleth(ebird.2, num_colors=1)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=1)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=2)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=9)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=10)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=9)
county_choropleth(ebird.2, num_colors=1)
county_choropleth(ebird.2, state_zoom="maine", num_colors=9)
county_choropleth(ebird.2, state_zoom="new hampshire", num_colors=9)
county_choropleth(ebird.2, state_zoom="new jearsy", num_colors=9)
county_choropleth(ebird.2, state_zoom="new jersey", num_colors=9)
county_choropleth(ebird.2, state_zoom="new york", num_colors=9)
county_choropleth(ebird.2, state_zoom="pennsylvania", num_colors=9)
county_choropleth(ebird.2, state_zoom="illinois", num_colors=9)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=9)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=1)
county_choropleth(ebird.2, state_zoom="florida", num_colors=1)
county_choropleth(ebird.2, num_colors=1)
county_choropleth(ebird.2, state_zoom="pennsylvania", num_colors=1)
county_choropleth(ebird.2, state_zoom="massachusetts", num_colors=1)
county_choropleth(ebird.2, num_colors=9)
?county.regions
head(data(county.regions))
data(county.regions)
head(%%)
head%>%
laksdjf
head(county.regions)
county_choropleth(ebird.2, num_colors=9, )
county_choropleth(ebird.2, num_colors=1 )
county_choropleth(ebird.2, state_zoom="washington", num_colors=1)
county_choropleth(ebird.2, state_zoom="alabama", num_colors=1)
county_choropleth(ebird.2, state_zoom="virginia", num_colors=1)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=1)
county_choropleth(ebird.2, state_zoom="delaware", num_colors=1)
county_choropleth(ebird.2, state_zoom="connecticut", num_colors=1)
county_choropleth(ebird.2, state_zoom="california", num_colors=1)
--##------##countries## ----##--
ebird.n<-read.csv("ebird_countries.csv", header=FALSE)
--##------##countries## ----##--
ebird.n<-read.csv("ebird_countries.csv", header=FALSE)
ebird.n<-read.csv("ebird_countries.csv", header=FALSE)
names(ebird_n)<-c("region", "value")
names(ebird.n)<-c("region", "value")
head(ebird.n)
ebird.n$region<-tolower(ebirdc$region)
ebird.n$region<-tolower(ebird.n$region)
?choropleth
?choroplethr
?country_choropleth
country_choropleth(ebird.n)
data(country_choropleth)
?country_choropleth
?country.map
data("country.map")
head(country.map)
?country.names
data(country.regions)
head(country.regions)
merge(ebird.n, country.regions, by="region", all.y=TRUE)
ebird.nm<-merge(ebird.n, country.regions, by="region", all.y=TRUE)
ebird.nm[is.na(ebird.nm)] <- 0
head(ebird.nm)
country_choropleth(ebird.nm)
country_choropleth(ebird.nm, num_colors = 1)
View(country.regions)
ebird.n<-read.csv("ebird_countries.csv", header=FALSE)
names(ebird.n)<-c("region", "value")
ebird.n$region<-tolower(ebird.n$region)
ebird.nm<-merge(ebird.n, country.regions, by="region", all.y=TRUE)
ebird.nm[is.na(ebird.nm)] <- 0
country_choropleth(ebird.nm, num_colors = 1)
ebird.n<-read.csv("ebird_countries.csv", header=FALSE)
names(ebird.n)<-c("region", "value")
ebird.n$region<-tolower(ebird.n$region)
ebird.nm<-merge(ebird.n, country.regions, by="region", all.y=TRUE)
ebird.nm[is.na(ebird.nm)] <- 0
country_choropleth(ebird.nm, num_colors = 1)
View(ebird.nm)
country_choropleth(ebird.nm, num_colors = 9)
country_choropleth(ebird.nm, num_colors = 2)
country_choropleth(ebird.nm, num_colors = 3)
country_choropleth(ebird.nm, num_colors = 4)
country_choropleth(ebird.nm, num_colors = 5)
country_choropleth(ebird.nm, num_colors = 6)
country_choropleth(ebird.nm, num_colors = 7)
country_choropleth(ebird.nm, num_colors = 8)
country_choropleth(ebird.nm, num_colors = 9)
country_choropleth(ebird.nm, num_colors = 1)
map(worldMapEnv, ebird.nm)
library(maps)
map(worldMapEnv, ebird.nm)
?map
map(database="ebird.nm")
map(database="world")
map(database="world", ebird.nm)
map(database="world", regions= ebird.nm)
?map
map(database="world", regions= ebird.nm$region)
?map
map(database="world", regions= ebird.nm$region, fill=TRUE, col=ebird.nm$value)
map(database="world", fill=TRUE, col=ebird.nm$value)
map(database="world", fill=TRUE, col=ebird.nm)
map(database="world", fill=TRUE, col=ebird.nm$value)
?map
map(database="world", regions= ebird.nm$region, fill=TRUE, col=ebird.nm$value)
install.packages("rworldmap")
library(rworldmap)
vignette('rworldmap')
ebird.w <- joinCountryData2Map(ebird.n
+ , joinCode = "NAMES"
+ , nameJoinColumn = "ISO3V10")
ebird.w <- joinCountryData2Map(ebird.n
, joinCode = "NAMES"
, nameJoinColumn = "ISO3V10")
ebird.w <- joinCountryData2Map(ebird.n
, joinCode = "NAME"
, nameJoinColumn = "ISO3V10")
data(countryExData)
ebird.w <- joinCountryData2Map(ebird.n
, joinCode = "NAME"
, nameJoinColumn = "region")
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapCountryData(ebird.w, nameColumnToPlot="value" )
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "pretty")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "pretty", mapRegion = "eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "quantiles", mapRegion = "eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "quantiles")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "fixedwidth")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=10)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=15)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=15)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=5)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=10)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=10, mapRegion="eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=15, mapRegion="eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20, mapRegion="eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20, mapRegion="eurasia",colourPalette = "black2white")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20, mapRegion="eurasia",colourPalette = "black2White")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20, mapRegion="eurasia",colourPalette = "white2Black")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "white2Black")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "logfixedwidth", mapRegion = "eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "logfixedwidth")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "white2Black")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo")
View(ebird.n)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", mapRegion = "eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", mapRegion = "asia")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", mapRegion = "africa")
getMap()$NAME
ebird.westbank<-sub("palestinian territory", "west bank", ebird.n, fixed=TRUE)
ebird.w <- joinCountryData2Map(ebird.westbank
, joinCode = "NAME"
, nameJoinColumn = "region")
ebird.westbank<-sub("palestinian territory", "west bank", ebird.n$region, fixed=TRUE)
ebird.w <- joinCountryData2Map(ebird.westbank
, joinCode = "NAME"
, nameJoinColumn = "region")
head(ebird.n)
head(ebird.westbank)
ebird.w<-sub("palestinian territory", "west bank", ebird.n$region, fixed=TRUE)
ebird.w <- joinCountryData2Map(ebird.w
, joinCode = "NAME"
, nameJoinColumn = "region")
ebird.westbank<-ebird.nm
ebird.westbank$region<-sub("palestinian territory", "west bank", ebird.n$region, fixed=TRUE)
ebird.n$region2<-sub("palestinian territory", "west bank", ebird.n$region, fixed=TRUE)
ebird.w <- joinCountryData2Map(ebird.n
, joinCode = "NAME"
, nameJoinColumn = "region2")
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "logfixedwidth")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", mapRegion = "africa")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "logfixedwidth", mapRegion = "africa")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", addLegend = FALSE, addMapLegend("species I've seen"))
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", mapTitle = "Species seen by country")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo", mapTitle = "Species seen by country", mapLegend=FALSE)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo",
mapTitle = "Species seen by country")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo",
mapTitle = "bird species seen by country")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo",
mapTitle = "Bird species seen by country")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "logfixedwidth", mapRegion = "eurasia", mapTitle="Birds seen in Eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "categorical", mapRegion = "eurasia", mapTitle="Birds seen in Eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "fixedWidth", mapRegion = "eurasia", mapTitle="Birds seen in Eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "diverging", mapRegion = "eurasia", mapTitle="Birds seen in Eurasia")
mapCountryData(ebird.w, nameColumnToPlot="value", catMethod= "logFixedWidth", mapRegion = "eurasia", mapTitle="Birds seen in Eurasia")
par(mai=c(0,0,0.2,0),xaxs="i",yaxs="i")
mapBubbles( ebird.w
, nameZSize="value"
, nameZColour="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, landCol="wheat"
)
mapBubbles( ebird.w
, nameZSize="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, landCol="wheat"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod=20
, landCol="wheat"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod=20
, landCol="wheat"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="logFixedWidth"
, landCol="wheat"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
)
county_choropleth(ebird.2, state_zoom="california", num_colors=1)
county_choropleth(ebird.2, state_zoom="michigan", num_colors=1)
county_choropleth(ebird.2, state_zoom="florida", num_colors=1)
county_choropleth(ebird.2, state_zoom="florida", num_colors=1)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
)
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo",
mapTitle = "Bird species seen by country", oceanCol = "lightblue")
mapCountryData(ebird.w, nameColumnToPlot="value", numCats=20,colourPalette = "topo",
mapTitle = "Bird species seen by country")
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
, mapRegion = "eurasia"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="logFixedWidth"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, numCats = "20"
# , catMethod="logFixedWidth"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, numCats = 20
# , catMethod="logFixedWidth"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, numCats = 200
# , catMethod="logFixedWidth"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="catagorical"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
, mapRegion = "europe"
)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
# , mapRegion = "europe"
)
source('~/ebird_counties.R', echo=TRUE)
mapBubbles( ebird.w
, nameZSize="value"
#,nameZcolor="value"
, colourPalette="rainbow"
, oceanCol="lightblue"
, catMethod="pretty"
, landCol="wheat"
, mapRegion = "europe"
)
county_choropleth(ebird.2,  num_colors=1)
county_choropleth(ebird.2, num_colors=2 )
county_choropleth(ebird.2, num_colors=9 )
county_choropleth(ebird.2, num_colors=5 )
county_choropleth(ebird.2, num_colors=1 )
county_choropleth(ebird.2, state_zoom="florida", num_colors=1)
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/undergrads/harold/analyses/germination_stan")
} else
setwd("C:/Users/Owner/Documents/GitHub/germination_stan")
##libraries
library(rstan)
library(shinystan)
library(ggplot2)
## What do you want to do?
runstan=FALSE      # set to true if running the stan model
realdata=FALSE    # set to true to run on real data
load("germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs,
germinated==1 &
sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
data<-germs.y
nseed<-length(unique(data$uniqueid)) #1205 unique seeds
N<-nseed
y<-data$daysfromstart    # dependent variable
log_y=log(y)
temp<-data$temp
data$strat
strat= data$strat
strat=1 ifelse(strat==30,2)
strat= ifelse(strat==30,1,2)
strat
mean(strat)
mean(data$strat)
lkj
