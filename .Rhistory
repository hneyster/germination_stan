?options
parallel::detectCores()
updateR()
library("installr")
updateR()
setInternet2(TRUE)
updateR()
load("~/GitHub/eysterthesis/10-25.RData")
modrater<-glmer(germinated~origin*as.factor(temp)*strat+(1|sp/location/uniqind),
family=binomial(link="logit"),
data=subset(germs, sp!="PLAMED" & sp!="PLACOR")) #fails to converge
modrater<-glmer(germinated~origin*as.factor(temp)*strat+(1|sp),
family=binomial(link="logit"),
data=subset(germs, sp!="PLAMED" & sp!="PLACOR")) #fails to converge
modrater<-glmer(germinated~origin*as.factor(temp)+(1|sp),
family=binomial(link="logit"),
data=subset(germs, sp!="PLAMED" & sp!="PLACOR")) #fails to converge
mod
modrater
modrater<-glmer(germinated~origin*strat+(1|sp),
family=binomial(link="logit"),
data=subset(germs, sp!="PLAMED" & sp!="PLACOR"))
modrater
modrater<-glmer(germinated~origin+strat+(1|sp),
family=binomial(link="logit"),
data=subset(germs, sp!="PLAMED" & sp!="PLACOR"))
modrater
modrater<-glmer(germinated~origin*strat+(1|sp),
family=binomial(link="logit"),
data=subset(germs, sp!="PLAMED" & sp!="PLACOR"))
mod<-modrater
par(mfrow=c(2,2))    # check residuals
qqnorm(resid(mod), main="qq-plot residuals")
qqline(resid(mod))
qqnorm(ranef(mod)$farm.f[,1], main="qq-plot, farm")
qqline(ranef(mod)$farm.f[,1])
qqnorm(ranef(mod)$sp[,1], main="qq-plot, farm")
qqline(ranef(mod)$sp[,1])
plot(fitted(mod), resid(mod)) # residuals vs fitted values
abline(h=0)
plot(fitted(mod), jitter(dat$germinated, amount=0.05), xlab="Fitted values", ylab="Probability of presence", las=1, cex.lab=1.2, cex=0.8)
plot(fitted(mod), jitter(germs$germinated, amount=0.05), xlab="Fitted values", ylab="Probability of presence", las=1, cex.lab=1.2, cex=0.8)
plot(fitted(mod), jitter(germs$germinated, amount=0.05), xlab="Fitted values", ylab="Probability of presence", las=1, cex.lab=1.2, cex=0.8)
germs<-subset(germs, germinated==1 & sp!="PLAMED" & sp!="PLACOR")
plot(fitted(mod), jitter(germs$germinated, amount=0.05), xlab="Fitted values", ylab="Probability of presence", las=1, cex.lab=1.2, cex=0.8)
lenght(germs$germinated)
lengt(germs$germinated)
length(germs$germinated)
length(mod)
t.breaks <- cut(fitted(mod), seq(0,1, by=0.1))
means    <- tapply(germs$germinated, t.breaks, mean)
mean(ranef(mod)$sp[,1])
sp.should <- plogis(fixef(mod)["(Intercept)"])                # expected value at the intercept
sp.is     <- plogis(fixef(mod)["(Intercept)"]-0.01570766)    # slightly reduced value because the mean farm random effect is not precisely 0
# => the error at the Intercept is:
(sp.should-sp.is)/sp.should   # 0.09 %
# or:
exp(-0.001690303)
sp.should
1-0.9983111
library(blmeco)
dispersion_glmer(mod)
germs$resid <- resid(mod)
getwd()
library(rstan)
datax<-("N", "x", "y")
datax<-c("N", "x", "y")
head(detax)
head(datax)
n <- 50                                      # sample size
sigma <- 5                                   # standard deviation of the residuals
b0 <- 2                                      # intercept
b1 <- 0.7                                    # slope
x <- runif(n, 10, 30)                        # random numbers of the covariate
simresid <- rnorm(n, 0, sd=sigma)            # residuals
y <- b0 + b1*x + simresid                    # calculate y, i.e. the data
#-------------------------------------------------------------------------------
# Bundle data into a list
#-------------------------------------------------------------------------------
datax <- list(n=length(y), y=y, x=x)
fit <- stan(file = "STAN/linreg.stan.txt", data=datax, chains=10, iter=1000)
fit <- stan(file = "~/linreg.stan.txt", data=datax, chains=10, iter=1000)
fit <- stan(file = "~/linreg.stan", data=datax, chains=10, iter=1000)
rversion
R.version()
R.Version()
Sys.getenv("PATH")
system('g++ -v')
load("~/GitHub/eysterthesis/10-25.RData")
library(rstan)
n <- 50                                      # sample size
sigma <- 5                                   # standard deviation of the residuals
b0 <- 2                                      # intercept
b1 <- 0.7                                    # slope
x <- runif(n, 10, 30)                        # random numbers of the covariate
simresid <- rnorm(n, 0, sd=sigma)            # residuals
y <- b0 + b1*x + simresid                    # calculate y, i.e. the data
datax <- list(n=length(y), y=y, x=x)
fit <- stan(file = "~/linreg.stan", data=datax, chains=10, iter=1000)
Sys.getenv("PATH")
system('g++ -v')
system('where make')
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
setwd("C:/Users/Owner/Documents/GitHub/germination_stan")
##libraries
library(rstan)
library(shinystan)
library(ggplot2)
## What do you want to do?
runstan=TRUE # set to true if running the stan model
realdata=TRUE # set to true to run on real data
if (realdata==TRUE) {
# Setting up the  real data  for the Stan model-----------------
load("germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs,
germinated==1 &
sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
data<-germs.y
nseed<-length(unique(data$uniqueid)) #1205 unique seeds
N<-nseed
y<-data$daysfromstart                    # dependent variable
temp<-data$temp   # independent variable
strat<-data$strat
dummy_variables <- model.matrix(~ origin, data = data)
origin<-dummy_variables[,2]
intercept<-rep(1, nrow(data))
#setting up to random effects data:
nsp<-length(unique(germs.y$sp))
sp_alph<-data$sp
sp<-ifelse (sp_alph=="CAPBUR", 1,     #making sp numeric, in alphabetical order
ifelse(sp_alph=="CHEMAJ",2,
ifelse(sp_alph=="DACGLO", 3,
ifelse(sp_alph=="PLALAN", 4,
ifelse(sp_alph=="PLAMAJ", 5,
ifelse(sp_alph=="RUMCRI", 6, 7))))))
nsp<-length(unique(data$sp))
#putting all the data together:
datax<-list(N=N, y=y, temp=temp, origin=origin, strat=strat,  nsp=nsp, sp=sp)
#,nloc=nloc, nfamily=nfamily, loc=loc, family=family)
}
## fitting the stan model -------------------------------------------------
if (runstan==TRUE) {
if (realdata==TRUE) {germdata=datax
} else
{load("Fake_germdata.RData")
germdata<-list(y=fake$y, temp=as.numeric(fake$temp), origin=as.numeric(fake$origin),
strat=as.numeric(fake$strat), N=nrow(fake), sp=as.numeric(fake$sp), nsp=length(unique(fake$sp)))}
fit_sp<- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=1200)# 380 divergent transitions#  divergent transitions above diag
#fit1 <- stan(file = "germdate_sp.stan", data=germdata, chains=10, iter=1000, control = list(adapt_delta = 0.99))
#fit2 <- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=5000, control = list(adapt_delta = 0.99)) #high Rhat, low mixing
#fit_sp <- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=20000, warmup=12000, thin=2,  control = list(adapt_delta = 0.99)) #This model yields 915 divergent transitions -- all below the diag in the paris plot
#save(fit_sp, file="germdate_sp_random3.Rdata")
#save(fit2, file = "germdate_sp-random.Rdata")
#save(fit, file="germdate_nore.Rdata")
}
my_sso <- launch_shinystan(fit_sp, rstudio = getOption("shinystan.rstudio"))
save(fit_sp, file="germdate_sp_real.Rdata")
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
setwd("C:/Users/Owner/Documents/GitHub/germination_stan")
##libraries
library(rstan)
library(shinystan)
library(ggplot2)
## What do you want to do?
runstan=TRUE # set to true if running the stan model
realdata=FALSE # set to true to run on real data
if (realdata==TRUE) {
# Setting up the  real data  for the Stan model-----------------
load("germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs,
germinated==1 &
sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
data<-germs.y
nseed<-length(unique(data$uniqueid)) #1205 unique seeds
N<-nseed
y<-data$daysfromstart                    # dependent variable
temp<-data$temp   # independent variable
strat<-data$strat
dummy_variables <- model.matrix(~ origin, data = data)
origin<-dummy_variables[,2]
intercept<-rep(1, nrow(data))
#setting up to random effects data:
nsp<-length(unique(germs.y$sp))
sp_alph<-data$sp
sp<-ifelse (sp_alph=="CAPBUR", 1,     #making sp numeric, in alphabetical order
ifelse(sp_alph=="CHEMAJ",2,
ifelse(sp_alph=="DACGLO", 3,
ifelse(sp_alph=="PLALAN", 4,
ifelse(sp_alph=="PLAMAJ", 5,
ifelse(sp_alph=="RUMCRI", 6, 7))))))
nsp<-length(unique(data$sp))
#putting all the data together:
datax<-list(N=N, y=y, temp=temp, origin=origin, strat=strat,  nsp=nsp, sp=sp)
#,nloc=nloc, nfamily=nfamily, loc=loc, family=family)
}
## fitting the stan model -------------------------------------------------
if (runstan==TRUE) {
if (realdata==TRUE) {germdata=datax
} else
{load("Fake_germdata.RData")
germdata<-list(y=fake$y, temp=as.numeric(fake$temp), origin=as.numeric(fake$origin),
strat=as.numeric(fake$strat), N=nrow(fake), sp=as.numeric(fake$sp), nsp=length(unique(fake$sp)))}
fit_sp<- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=1200, control=list(adapt_delta=0.99))# 380 divergent transitions#  divergent transitions above diag
#fit1 <- stan(file = "germdate_sp.stan", data=germdata, chains=10, iter=1000, control = list(adapt_delta = 0.99))
#fit2 <- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=5000, control = list(adapt_delta = 0.99)) #high Rhat, low mixing
#fit_sp <- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=20000, warmup=12000, thin=2,  control = list(adapt_delta = 0.99)) #This model yields 915 divergent transitions -- all below the diag in the paris plot
#save(fit_sp, file="germdate_sp_random3.Rdata")
#save(fit2, file = "germdate_sp-random.Rdata")
#save(fit_sp, file="germdate_sp_real.Rdata")
}
save(fit_sp, file="germdate_sp_fake.99.Rdata")
pairs(fit_sp, pars=c("mu_b_temp", "mu_b_strat", "mu_b_origin"))
pairs(fit_sp, pars=c("mu_b_inter_to","mu_b_inter_ts", "mu_b_inter_so", "mu_b_inter_tso"))
dev.off()
pairs(fit_sp, pars=c("mu_b_temp", "mu_b_strat", "mu_b_origin"))
stan_trace(fit_sp, pars=c("mu_b_inter_to"))
stan_trace(fit_sp, pars=c("mu_b_inter_ts"))
stan_trace(fit_sp, pars=c("mu_b_inter_so"))
stan_trace(fit_sp, pars=c("mu_b_inter_tso"))
stan_trace(fit_sp, pars=c("mu_b_temp"))
stan_trace(fit_sp, pars=c("mu_b_strat"))
stan_trace(fit_sp,pars=c("mu_b_origin"))
my_sso <- launch_shinystan(fit_sp, rstudio = getOption("shinystan.rstudio"))
## housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
setwd("C:/Users/Owner/Documents/GitHub/germination_stan")
##libraries
library(rstan)
library(shinystan)
library(ggplot2)
## What do you want to do?
runstan=TRUE # set to true if running the stan model
realdata=FALSE # set to true to run on real data
if (realdata==TRUE) {
# Setting up the  real data  for the Stan model-----------------
load("germs.Rdata") #cleaned and processed real data
germs.y<-(subset(germs,
germinated==1 &
sp!="PLAMED" &  sp!="PLACOR"))    #just the data from seeds that germianted, and taking out the congenerics
data<-germs.y
nseed<-length(unique(data$uniqueid)) #1205 unique seeds
N<-nseed
y<-data$daysfromstart                    # dependent variable
temp<-data$temp   # independent variable
strat<-data$strat
dummy_variables <- model.matrix(~ origin, data = data)
origin<-dummy_variables[,2]
intercept<-rep(1, nrow(data))
#setting up to random effects data:
nsp<-length(unique(germs.y$sp))
sp_alph<-data$sp
sp<-ifelse (sp_alph=="CAPBUR", 1,     #making sp numeric, in alphabetical order
ifelse(sp_alph=="CHEMAJ",2,
ifelse(sp_alph=="DACGLO", 3,
ifelse(sp_alph=="PLALAN", 4,
ifelse(sp_alph=="PLAMAJ", 5,
ifelse(sp_alph=="RUMCRI", 6, 7))))))
nsp<-length(unique(data$sp))
#putting all the data together:
datax<-list(N=N, y=y, temp=temp, origin=origin, strat=strat,  nsp=nsp, sp=sp)
#,nloc=nloc, nfamily=nfamily, loc=loc, family=family)
}
## fitting the stan model -------------------------------------------------
if (runstan==TRUE) {
if (realdata==TRUE) {germdata=datax
} else
{load("Fake_germdata.RData")
germdata<-list(y=fake$y, temp=as.numeric(fake$temp), origin=as.numeric(fake$origin),
strat=as.numeric(fake$strat), N=nrow(fake), sp=as.numeric(fake$sp), nsp=length(unique(fake$sp)))}
fit_sp<- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=1200, control=list(adapt_delta=0.99))#
#for chains=4, iter=1200 real data has 834 divergent trans., fake has 380. for ad=.99, fake has 26, real has
#fit1 <- stan(file = "germdate_sp.stan", data=germdata, chains=10, iter=1000, control = list(adapt_delta = 0.99))
#fit_sp <- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=5000, control = list(adapt_delta = 0.99)) #high Rhat, low mixing
fit_sp <- stan(file = "germdate_sp.stan", data=germdata, chains=4, iter=20000, warmup=12000, thin=2,  control = list(adapt_delta = 0.99)) #This model yields 915 divergent transitions -- all below the diag in the paris plot
#save(fit_sp, file="germdate_sp_random3.Rdata")
#save(fit2, file = "germdate_sp-random.Rdata")
#save(fit_sp, file="germdate_sp_fake.99.Rdata")
}
