z=c("z1", "z2")),
nblock=1)
trout.design <- Lma.design(nalternatives = 2, attribute.names = list(distance_from_home=c("x1", "x2"),
y=c("y1", "y2"),
z=c("z1", "z2")),
nblock=1)
trout.qs<-questionnaire(trout.design, common=NULL, quote=FALSE)
trout.design <- Lma.design(nalternatives = 2, attribute.names = list(distance_from_home=c("1", "2"),
pop_status=c("genetically unique", "homogenous"),
cost=c("$20", "$50")),
nblock=1)
trout.qs<-questionnaire(trout.design, common=NULL, quote=FALSE)
trout.design <- Lma.design(nalternatives = 2, attribute.names = list(distance_from_home=c("1_hours", "2_hours"),
pop_status=c("genetically unique", "homogenous"),
cost=c("$20", "$50")),
nblock=1)
trout.qs<-questionnaire(trout.design, common=NULL, quote=FALSE)
trout.design
?rotation.design
trout.design <-rotation.design(nalternatives = 2, attribute.names = list(distance_from_home=c("1_hours", "2_hours"),
pop_status=c("genetically unique", "homogenous"),
cost=c("$20", "$50")),
nblock=1)
trout.design
3^2
test.design<-rotation.design(nalternatives=2, attribute.names = list(a=c("x", "y")))
test.design<-rotation.design(nalternatives=2, attribute.names = list(a=c("x", "y"), b=c("w", "v")))
test.design<-rotation.design(nalternatives=2, nblock=1, attribute.names = list(a=c("x", "y"), b=c("w", "v")))
test.design
test.design<-rotation.design(nalternatives=2, nblock=1, attribute.names = list(a=c("x", "y"), b=c("w", "v")))
test.design
test.design<-rotation.design(nalternatives=2, nblock=1, attribute.names = list(a=c("x", "y"), b=c("w", "v"), c=c("S", "T")))
test.design
test.design<-Lma.design(nalternatives=2, nblock=1, attribute.names = list(a=c("x", "y"), b=c("w", "v"), c=c("S", "T")))
test.design
test.design<-rotation.design(nalternatives=2, nblock=1, attribute.names = list(a=c("x", "y"), b=c("w", "v"), c=c("S", "T")))
test.design
test.design<-rotation.design(nalternatives=2, nblock=1, randomize=T, attribute.names = list(a=c("x", "y"), b=c("w", "v"), c=c("S", "T")))
test.design
test.design<-rotation.design(nalternatives=2, nblock=1, randomize=F, attribute.names = list(a=c("x", "y"), b=c("w", "v"), c=c("S", "T")))
test.design
test.design<-rotation.design(nalternatives=2, nblock=1, randomize=T, attribute.names = list(a=c("x", "y"), b=c("w", "v"), c=c("S", "T")))
save(mod_sptot, mod_all, mod_each, mod_some, "africa_mod.Rdata")
save(c(mod_sptot, mod_all, mod_each, mod_some), "africa_mod.Rdata")
save(mod_some, "africa_mod.Rdata")
save(list=c(mod_sptot, mod_all, mod_each, mod_some), file="africa_mod.Rdata")
save(list=c(mod_sptot, mod_all, mod_each, mod_some), file="africa_mod.Rdata")
mod_sptot<-stan_glm(log.vists~ sp.count + Natural.attractiveness + PPP..log. + Access..log.+ Population..log.+sp.count:Forest, data=mdat, chains=4, iter=1000)
load("~/.RData")
save(list=c(mod_sptot, mod_all, mod_each, mod_some), file="africa_mod.Rdata")
save(c(mod_sptot, mod_all, mod_each, mod_some), file="africa_mod.Rdata")
head(mod_all)
save(list=c(mod_sptot, mod_all, mod_each, mod_some), file="africa_mod.Rdata")
save(mod_sptot, mod_all, mod_each, mod_some, file="africa_mod.Rdata")
getwd
getwd()
plot4
mp5
mp6
bird1<-mp6
ss <- launch_shinystan(mod_sptot.bird, rstudio = getOption("shinystan.rstudio"))
library(plyr)
library(dplyr)
library(lme4)
library(corrgram)
library(car)
library(rstanarm)
library(ggplot2)
options(shinystan.rstudio = TRUE)
ss <- launch_shinystan(mod_sptot.bird, rstudio = getOption("shinystan.rstudio"))
options(mc.cores = parallel::detectCores())
mod_spp.bird<-stan_glm(log.visits~  Buffalo + Leopard + Cheetah + AfricanWildDog + Giraffe + Lion + Black.Rhino + White.Rhino +
elephant.presence + max.bird + max.bird:Forest + Natural.attractiveness + PPP..log. + Access..log.+ Population..log.,
data=mdat, chains=4, iter=1000)
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
library(plyr)
library(dplyr)
library(lme4)
library(corrgram)
library(car)
library(rstanarm)
library(ggplot2)
source("http://peterhaschke.com/Code/multiplot.R") #so that the multiplot function works
pd<-position_dodge(.4)
#data input and formatting:
setwd("~/UBC/Africa")
birdrich<-read.csv("RasterT_richness_identify.csv")
birdrichpa<-
ddply(birdrich, c( "FID_Join_O" ), summarise,
max.bird=max(grid_code))
birdrichpa<-(rbind(birdrichpa, c("72", "577"), c("115", "383"), c("116", "269"), c("120", "287"), c("141", "410"), c("155", "338"),
c("157", "329"), c("123", "545"))) #some of the parks are too small to contain the points resulting
#from the raster-points conversion. Thus these values were found by hand from the raster data
birdrichpa$max.bird<-as.numeric(birdrichpa$max.bird)
ncomm<-read.csv('ncomms13379-s2.csv') #this is the data from Naidoo et al. Nat. Comms. with the addition of Black Rhino and White Rhino occurance data
pa_mega<-read.csv("newPA_Spp_join.csv") #this has occurance data for Giraffe, African Wild Dog, buffalo, Cheetah, and Leopard.
newdat<-merge(birdrichpa, pa_mega, by.x="FID_Join_O", by.y="FID")
slimdat<-subset(newdat, select=c(Name_new, max.bird, Buffalo:Giraffe)) #removing the extranious data
bin_dat<-mutate_each(slimdat, funs(ifelse((.)==0,0,1)), -Name_new, -max.bird) #changing the new data presence/absense, instead of count of # of populaitons intersecting PA
mdat<- merge(bin_dat,ncomm,by.x=("Name_new"), by.y=("Protected.Area"), all=T) #combining PA occurance data for all the spp of interest.
mdat$elephant.presence<-ifelse(mdat$Elephant.densit==0, 0, 1) # making a binary presence/absence for elephant
animals<-subset(mdat, select=c(Buffalo, Lion, elephant.presence, Cheetah, Leopard, AfricanWildDog,Giraffe, Black.Rhino, White.Rhino))
mdat$sp.count<-rowSums(animals) #this column shows how many Charismatic Megafauna are in each PA
mdat$log.vists<-ifelse(!is.finite(log(mdat$Average.annual.visits)), 0, log(mdat$Average.annual.visits)) #logging visits, and setting log(0) to zero
mdat$Rhino<-ifelse(mdat$Black.Rhino==1, mdat$Black.Rhino, mdat$White.Rhino) #combining black and white rhino
mod_spp.bird<-stan_glm(log.visits~  Buffalo + Leopard + Cheetah + AfricanWildDog + Giraffe + Lion + Black.Rhino + White.Rhino +
elephant.presence + max.bird + max.bird:Forest + Natural.attractiveness + PPP..log. + Access..log.+ Population..log.,
data=mdat, chains=4, iter=1000)
summary<-
ddply(mdat, c( "sp.count" ), summarise,
mean=mean(log.vists), sd=sd(log.visits),
sem=sd/sqrt(length(Average.annual.visits)))
mdat<-NULL
options(stringsAsFactors = FALSE)
options(shinystan.rstudio = TRUE)
options(mc.cores = parallel::detectCores())
library(plyr)
library(dplyr)
library(lme4)
library(corrgram)
library(car)
library(rstanarm)
library(ggplot2)
source("http://peterhaschke.com/Code/multiplot.R") #so that the multiplot function works
pd<-position_dodge(.4)
#data input and formatting:
setwd("~/UBC/Africa")
birdrich<-read.csv("RasterT_richness_identify.csv")
birdrichpa<-
ddply(birdrich, c( "FID_Join_O" ), summarise,
max.bird=max(grid_code))
birdrichpa<-(rbind(birdrichpa, c("72", "577"), c("115", "383"), c("116", "269"), c("120", "287"), c("141", "410"), c("155", "338"),
c("157", "329"), c("123", "545"))) #some of the parks are too small to contain the points resulting
#from the raster-points conversion. Thus these values were found by hand from the raster data
birdrichpa$max.bird<-as.numeric(birdrichpa$max.bird)
ncomm<-read.csv('ncomms13379-s2.csv') #this is the data from Naidoo et al. Nat. Comms. with the addition of Black Rhino and White Rhino occurance data
pa_mega<-read.csv("newPA_Spp_join.csv") #this has occurance data for Giraffe, African Wild Dog, buffalo, Cheetah, and Leopard.
newdat<-merge(birdrichpa, pa_mega, by.x="FID_Join_O", by.y="FID")
slimdat<-subset(newdat, select=c(Name_new, max.bird, Buffalo:Giraffe)) #removing the extranious data
bin_dat<-mutate_each(slimdat, funs(ifelse((.)==0,0,1)), -Name_new, -max.bird) #changing the new data presence/absense, instead of count of # of populaitons intersecting PA
mdat<- merge(bin_dat,ncomm,by.x=("Name_new"), by.y=("Protected.Area"), all=T) #combining PA occurance data for all the spp of interest.
mdat$elephant.presence<-ifelse(mdat$Elephant.densit==0, 0, 1) # making a binary presence/absence for elephant
animals<-subset(mdat, select=c(Buffalo, Lion, elephant.presence, Cheetah, Leopard, AfricanWildDog,Giraffe, Black.Rhino, White.Rhino))
mdat$sp.count<-rowSums(animals) #this column shows how many Charismatic Megafauna are in each PA
mdat$log.visits<-ifelse(!is.finite(log(mdat$Average.annual.visits)), 0, log(mdat$Average.annual.visits)) #logging visits, and setting log(0) to zero
mdat$Rhino<-ifelse(mdat$Black.Rhino==1, mdat$Black.Rhino, mdat$White.Rhino) #combining black and white rhino
mod_spp.bird<-stan_glm(log.visits~  Buffalo + Leopard + Cheetah + AfricanWildDog + Giraffe + Lion + Black.Rhino + White.Rhino +
elephant.presence + max.bird + max.bird:Forest + Natural.attractiveness + PPP..log. + Access..log.+ Population..log.,
data=mdat, chains=4, iter=1000)
model<-mod_spp.bird
fits <- model %>%  #postior samples
as_data_frame %>%
rename(intercept = `(Intercept)`) %>%
select(-sigma)
n_draws <- 500
alpha_level <- .15
col_draw <- "grey60"
col_median <-  "#3366FF"
mp5<-  ggplot(mdat) +
aes(x = max.bird, y = log.vists) +
# Plot a random sample of rows as gray semi-transparent lines
geom_abline(aes(intercept = intercept, slope = max.bird),
data = sample_n(fits, n_draws), color = col_draw,
alpha = alpha_level) +
# Plot the median values in blue
geom_abline(intercept = median(fits$intercept),
slope = median(fits$max.bird),
size = 1, color = col_median) +
geom_point() +
scale_x_continuous(labels = function(x) 10 ^ x) +
labs(x = "max.bird", y = "log.visits")
mp5
model<-mod_spp.bird
fits <- model %>%  #postior samples
as_data_frame %>%
rename(intercept = `(Intercept)`) %>%
select(-sigma)
n_draws <- 500
alpha_level <- .15
col_draw <- "grey60"
col_median <-  "#3366FF"
mp5<-  ggplot(mdat) +
aes(x = max.bird, y = log.visits) +
# Plot a random sample of rows as gray semi-transparent lines
geom_abline(aes(intercept = intercept, slope = max.bird),
data = sample_n(fits, n_draws), color = col_draw,
alpha = alpha_level) +
# Plot the median values in blue
geom_abline(intercept = median(fits$intercept),
slope = median(fits$max.bird),
size = 1, color = col_median) +
geom_point() +
scale_x_continuous(labels = function(x) 10 ^ x) +
labs(x = "max.bird", y = "log.visits")
mp5
tidy_predictions <- function(mat_pred, df_data, obs_name = "observation",
prob_lwr = .025, prob_upr = .975) {
# Get data-frame with one row per fitted value per posterior sample
df_pred <- mat_pred %>%
as_data_frame %>%
setNames(seq_len(ncol(.))) %>%
tibble::rownames_to_column("posterior_sample") %>%
tidyr::gather_(obs_name, "fitted", setdiff(names(.), "posterior_sample"))
df_pred
# Helps with joining later
class(df_pred[[obs_name]]) <- class(df_data[[obs_name]])
# Summarise prediction interval for each observation
df_pred %>%
group_by_(obs_name) %>%
summarise(median = median(fitted),
lower = quantile(fitted, prob_lwr),
upper = quantile(fitted, prob_upr)) %>%
left_join(df_data, by = obs_name)
}
x_rng <- range(mdat$max.bird)
x_steps <- seq(x_rng[1], x_rng[2], length.out = 80)
new_data <- data_frame(
observation = seq_along(x_steps),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
pred_post <- posterior_predict(model, newdata = new_data)
summary(mod_spp.bird)
bayes_R2 <- function(fit) {
y <- get_y(fit)
ypred <- posterior_linpred(fit, transform = TRUE)
if (family(fit)$family == "binomial" && NCOL(y) == 2) {
trials <- rowSums(y)
y <- y[, 1]
ypred <- ypred %*% diag(trials)
}
e <- -1 * sweep(ypred, 2, y)
var_ypred <- apply(ypred, 1, var)
var_e <- apply(e, 1, var)
var_ypred / (var_ypred + var_e)
}
summarize(bayes_R2(model))
bayes_R2 <- function(fit) {
y <- get_y(fit)
ypred <- posterior_linpred(fit, transform = TRUE)
if (family(fit)$family == "binomial" && NCOL(y) == 2) {
trials <- rowSums(y)
y <- y[, 1]
ypred <- ypred %*% diag(trials)
}
e <- -1 * sweep(ypred, 2, y)
var_ypred <- apply(ypred, 1, var)
var_e <- apply(e, 1, var)
var_ypred / (var_ypred + var_e)
}
summarize(bayes_R2(model))
bayes_R2()
bayes_R2(model)
summarize(bayes_R2(model))
summarize(bayes_R2(model))
summarize(bayes_R2(mod_spp.bird))
summarize(bayes_R2(mod_sptot.bird))
mean(bayes_R2(model))
mean(bayes_R2(mod_all))
mean(bayes_R2(mod_some))
mean(bayes_R2(mod_each))
mean(bayes_R2(mod_spp.bird))
mean(bayes_R2(mod_sptot.bird))
mean(bayes_R2(model))
model(1)
model[1]
model[1]$coefficients
model[1]$coefficients[1]
model[1]$coefficients[2]
new_data <- data_frame(
observation = seq_along(x_steps),
Buffaloean(mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giragge= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = (mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giragge= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
x_rng <- range(mdat$max.bird)
x_steps <- seq(x_rng[1], x_rng[2], length.out = 80)
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = (mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giragge= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = (mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giraffe= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = seq((mean(mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giraffe= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
pred_post <- posterior_predict(model, newdata = new_data)
df_pred_post <- tidy_predictions(pred_post, new_data)
mp6<-ggplot(mdat) +
aes(x = max.bird) +
geom_ribbon(aes(ymin = lower, ymax = upper), data = df_pred_post,
alpha = 0.4, fill = "grey60") +
geom_line(aes(y = median), data = df_pred_post, colour = "#3366FF", size = 1) +
geom_point(aes(y = log.visits)) +
labs(x = "max.bird", y = "log.visits")
cor(cbind(mdat$Natural.attractiveness, mdat$sp.count), method="kendall")
#Bayesian R^2
# see : http://www.stat.columbia.edu/~gelman/research/unpublished/bayes_R2.pdf
bayes_R2 <- function(fit) {
y <- get_y(fit)
ypred <- posterior_linpred(fit, transform = TRUE)
if (family(fit)$family == "binomial" && NCOL(y) == 2) {
trials <- rowSums(y)
y <- y[, 1]
ypred <- ypred %*% diag(trials)
}
e <- -1 * sweep(ypred, 2, y)
var_ypred <- apply(ypred, 1, var)
var_e <- apply(e, 1, var)
var_ypred / (var_ypred + var_e)
}
mean(bayes_R2(model))
save(mod_sptot, mod_all, mod_each, mod_some, mod_spp.bird, mod_sptot.bird, file="africa_mod.Rdata")
mp6
bird1
mp6<-ggplot(mdat) +
aes(x = max.bird) +
geom_ribbon(aes(ymin = lower, ymax = upper), data = df_pred_post,
alpha = 0.4, fill = "grey60") +
geom_line(aes(y = median), data = df_pred_post, colour = "#3366FF", size = 1) +
geom_point(aes(y = log.visits)) +
labs(x = "max.bird", y = "log.visits")
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = seq((mean(mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giraffe= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino), mean(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = seq(mean(mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giraffe= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino=seq((mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino), mean(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
new_data <- data_frame(
observation = seq_along(x_steps),
Buffalo = seq(mean(mdat$Buffalo), mean(mdat$Buffalo),80),
Leopard= seq(mean(mdat$Leopard), mean(mdat$Leopard),80),
Cheetah= seq(mean(mdat$Cheetah), mean(mdat$Cheetah),80),
AfricanWildDog= seq(mean(mdat$AfricanWildDog), mean(mdat$AfricanWildDog),80),
Giraffe= seq(mean(mdat$Giraffe), mean(mdat$Giraffe),80),
Lion= seq(mean(mdat$Lion), mean(mdat$Lion),80),
Black.Rhino=seq(mean(mdat$Black.Rhino), mean(mdat$Black.Rhino),80),
White.Rhino= seq(mean(mdat$White.Rhino), mean(mdat$White.Rhino), 80),
elephant.presence= seq(mean(mdat$elephant.presence), mean(mdat$elephant.presence),80),
max.bird = x_steps,
sp.count= seq(mean(mdat$sp.count), mean(mdat$sp.count),80),
Natural.attractiveness= seq(mean(mdat$Natural.attractiveness), mean(mdat$Natural.attractiveness),80),
PPP..log.= seq(mean(mdat$PPP..log.), mean(mdat$PPP..log.),80),
Access..log.= seq(mean(mdat$Access..log.), mean(mdat$Access..log.),80),
Population..log.= seq(mean(mdat$Population..log.), mean(mdat$Population..log.),80),
Forest= seq(mean(mdat$Forest), mean(mdat$Forest),80))
pred_post <- posterior_predict(model, newdata = new_data)
df_pred_post <- tidy_predictions(pred_post, new_data)
mp6<-ggplot(mdat) +
aes(x = max.bird) +
geom_ribbon(aes(ymin = lower, ymax = upper), data = df_pred_post,
alpha = 0.4, fill = "grey60") +
geom_line(aes(y = median), data = df_pred_post, colour = "#3366FF", size = 1) +
geom_point(aes(y = log.visits)) +
labs(x = "max.bird", y = "log.visits")
mp6
mod_spp.bird$coefficients
mod_sptot.bird$coefficients
mp6<-ggplot(mdat) +
aes(x = max.bird) +
geom_ribbon(aes(ymin = lower, ymax = upper), data = df_pred_post,
alpha = 0.4, fill = "grey60") +
geom_line(aes(y = median), data = df_pred_post, colour = "#3366FF", size = 1) +
geom_point(aes(y = log.visits)) +
labs(x = "bird spp richness", y = "log(PA visits)")
mp6
plot(mod_spp.bird)
plot(mdat$max.bird, mdat$log.visits)
plot(log(mdat$max.bird), mdat$log.visits)
ss <- launch_shinystan(mod_spp.bird, rstudio = getOption("shinystan.rstudio"))
pdf(file="bird_richness_model.pdf")
plot(mod_spp.bird)
mp6
dev.off()
mdat$log.visits[=0]
?which
which(mdat$log.visits==0)
24/164
mean(bayes_R2(model))
summary(mod_spp.bird)
ir.pca <- prcomp(cbind(animals, mdat$Natural.attractiveness, mdat$max.bird),
center = TRUE,
scale. = TRUE)
plot(ir.pca)
plot(ir.pca, type="1")
plot(ir.pca, type="l")
summary(ir.pca)
ss <- launch_shinystan(mod_spp.bird, rstudio = getOption("shinystan.rstudio"))
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/undergrads/harold/analyses/germination_stan")
} else
load("germs.Rdata") #cleaned and processed real data
getwd
getwd()
if(length(grep("Lizzie", getwd())>0)) {
setwd("~/Documents/git/projects/misc/undergrads/harold/analyses/germination_stan")
} else
setwd("C:/Users/Owner/Documents/GitHub/germination_stan")
getwd()
load("germs.Rdata") #cleaned and processed real data
View(germs)
